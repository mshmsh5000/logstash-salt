input {
  tcp { 
    type => "syslog"
    port => 3333
  } 
}

filter {
  if [type] == "syslog" {
    grok {
      # See the following URL for a complete list of named patterns
      # logstash/grok ships with by default:
      # https://github.com/logstash/logstash/tree/master/patterns
      #
      # The grok filter will use the below pattern and on successful match use
      # any captured values as new fields in the event.
      # match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program} %{GREEDYDATA:syslog_message}" }
      # match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{DATA:syslog_program} %{GREEDYDATA:syslog_message} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program} (?!<[0-9])%{HOUR}:%{MINUTE}(?::%{SECOND})(?![0-9])" } # syslog\/(?<message_end>Already[A-Za-z :_]\+)" }
			# match => { "message" => "%{IP:syslog_ip}" } 
			# match => { "message" => "%{SYSLOGBASE}" }
			# match => { "message" => "%{SYSLOGBASE2}" }
			# match => { "message" => "%{SYSLOGLINE}" }
			# match => { "message" => "syslog\/(?Already[A-Za-z :_]\+)" }
      # match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} (?<syslog_message_out>:\w*:\w* \w* \w*: \w*:\/\/\w*.)"}
      # match => { "message" => "(?<Message>:*Already \w* \w*:\w*)" }
      # match => { "message" => "(?<uri>:http//[A-Za-z0-9$.+!*'(){},~:;=#%_\-]*)+" }
      #match => { "message" => "(?<pipe-string>http://[A-Za-z0-9$.+!*'(){},~:;=#%_\-|/ ]*)+" }
      # match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGPROG:syslog_program} %{SYSLOGHOST:syslog_hostname}" }
      # match => { "message" => "(?<pipestring>[^|]*|)" }
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp}(?<hostname>(.*?)\:)(?<referer>(.*?)\|)(?<timestamp>\d+\|)(?<module>\w+\|)(?<ipaddress>[0-9\.]+\|)(?<url>[^\|]+\|)\|(?<n>\d+\|)\|(?<error>(.*))" }
      # match => [ "message", "(?<member_number>^\d{7}$)" ]
      # add_tag => [ "syslog", "grokked" ]
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]    
    }
    # error message: no message plugin
    # message {
    #	match => { "syslog_message" => "%{IP:syslog_ip}" }	
    # }
    date {
      # Try to pull the timestamp from the 'timestamp' field (parsed above with
      # grok). The syslog time format looks like: "Oct 20 05:44:34"
      match => { "syslog_timestamp" => [ "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ] }
    }
    
   # if !("_grokparsefailure" in [tags]) {
   #	  mutate {
   #     replace => [ "@source_host", "%{syslog_hostname}" ]
   #     replace => [ "@message", "%{syslog_message}" ]
   #   }
   # }
    # mutate {
      # remove_field => [ "syslog_hostname", "syslog_message", "syslog_timestamp" ]
    # }    
  }
}

output {
  elasticsearch {
    # Setting 'embedded' will run  a real elasticsearch server inside logstash.
    # This option below saves you from having to run a separate process just
    # for ElasticSearch, so you can get started quicker!
    embedded => true
  }
  stdout { codec => rubydebug }
}
